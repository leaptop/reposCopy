	 Лабораторная работа   №5

Многомерные динамические массивы  

1.  Цель работы: приобретение практических навыков создания и обработки   многомерных динамических массивов.

2.   Основные сведения.
 
	Динамические многомерные массивы конструируются из того соображения, что каждый элемент массива может быть, в свою очередь, массивом. Рассмотрим алгоритм создания и обработки двумерного массива с произвольной длиной строки и произвольным количеством строк.
    1. Определяем указатель на массив указателей, задающий адреса начала строк матрицы:  <тип>  **uk (указатель на указатель на <тип>).
    2. Вводим размеры матрицы m,n.
    3. Создаём динамический массив указателей на указатели начала строк : uk=(<тип>  **)malloc(m*sizeof(тип *)); 
    или    
    uk= new  <тип> *[m];
    4. В цикле выделяем память под m массивов – строк по n элементов в каждом: 
    for (i=0; i<m; i++)   uk[i]=(<тип> *)malloc(n*sizeof(тип));
    или
    for (i=0; i<m; i++)  uk[i]=new <тип>[n];
    5. Обработка массива (возможна работа с индексированными элементами uk[i][j]).
    6. В цикле освобождаем память, занятую под m массивов – строк :                   for (i=0; i<m; i++)  free(uk[i]);
Или
     for (i=0; i<m; i++)  delete uk[i];
    7. Освобождаем память, занятую под массив указателей : 
     free(uk);
Или
     delete uk;

Можно несколько упростить программу, введя новый тип – указатель на заданный тип, например, typedef int *pInt; Тогда указатель на указатель можно объявить pInt *uk ; и выделить память под массив указателей 
uk= new pInt[m];






3. Пример обработки двумерного динамического массива

Составить программу, создающую динамическую матрицу размером n*n, заполнить матрицу случайными числами. Вычислить сумму каждой строки и поместить суммы строк в одномерный динамический массив.

#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
 main()
{ int m,n,j,i;
  float  **matr; float *mass; // Объявляем matr – указатель на массив указателей                        
  system("CLS");         
  printf("Введите размер строки n: "); scanf("%d",&n);
  printf("Введите количество строк m: "); scanf("%d",&m);
  mass=new  float[m]; // Выделяем память под массив сумм строк
  if (mass==NULL)
  {  puts("Не создан динамический массив!");
     return 1;
  }
  matr=new  float *[m]; // Выделяем память под массив указателей
  if (matr==NULL)
   {  puts("Не создан динамический массив!");
      return 1;
   } 
  for (i=0; i<m; i++)
  {  matr[i]=new  float[n]; // Выделяем память под i-ю строку 
     if (matr[i]==NULL)
     { puts("Не создан динамический массив ");
       return 1;
     }
     for (j=0; j<n; j++)   
        matr[i][j]=rand()%100;// Заполняем строку
  }
  for (i=0; i<m; i++)
  { mass[i]=0;
    for (j=0; j<n; j++)
       mass[i]+=matr[i][j]; //Помещаем сумму i-й строки в одномерный массив
  }
  for (i=0; i<m; i++)
  {  for (j=0; j<n; j++)
         printf("\t%6.2f",matr[i][j]);
     printf("\n");
  }
  for (i=0; i<m; i++)
     printf("\n  сумма %d строки %8.2f",i,mass[i]);
  for (i=0;i<m;i++)
   {  delete  matr[i]; //Освобождаем память i-й строки
         matr[i]=NULL;
    }
  delete  matr; // Освобождаем память массива указателей
  matr=NULL;
  delete  mass; // Освобождаем память массива сумм
  mass=NULL;
  getch();
 }

4. ВЫПОЛНЕНИЕ РАБОТЫ

    1. Сгенерировать одномерный динамический массив A из m элементов. Вводится число k (k<m). Получить из А матрицу B, по k элементов в строке.  Если m не кратно k недостающие елементы последней строки дополнить нулями.

    2. Создать двумерный массив с переменной длиной строки, в который записать таблицу умножения, следующего вида:
0   1   2   3   4   5   6   7   8   9
1   1
2   2   4
3   3   6   9
4   4   8  12 16
5   5  10 15 20 25
6   6  12 18 24 30 36
7   7  14 21 28 35 42 49
8   8  16 24 32 40 48 56 64
9   9  18 27 36 45 54 63 72 81
 

  
5. КОНТРОЛЬНЫЕ ВОПРОСЫ

4.1. Отличия динамического массива от статического.
4.2. Как создать одномерный динамический массив?
4.3. Как создать динамическую матрицу?
4.4. Как освобождается память, занятая под динамические структуры?


