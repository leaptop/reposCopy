       
Лабораторная работа №6

Функции. Передача параметров по адресу 

1. Цель работы:  Изучение методов передачи изменяемых параметров  функции.

2. Основные сведения

Что  делать, если мы хотим дать возможность функции изменять значение переданной переменной? Или возвратить результат через параметр функции, а не через её имя? Мы можем передать ей не саму переменную, а указатель (и для C, и для C++), например:
void prim (int *x) 
{
  *x = 10; //для доступа к содержимому по адресу нужна звёздочка
                //так как х - указатель
}
int main () 
{
  int z = 5;
  prim (&z); //передаём адрес, нужен амперсанд
  printf(“z=%d”,z); // z  теперь равно 10 
}
Такая передача аргументов, однако, опасна: легко забыть звёздочку в теле функции prim или амперсанд — в её вызове. Представьте себе, что prim состоит из 1000 строк, и везде, где употребляется x, нужна звёздочка. В Си++ можно передавать параметры по ссылкам. Пример из предыдущего абзаца теперь выглядит так:
void prim (int & x) 
{
  x = 17; //здесь не нужна звёздочка
}
int main () 
{
  int z = 5;
  prim (z); // здесь амперсанд не нужен
  printf(“z=%d”,z); // теперь z=10
}
Однако, в таком варианте использования ссылок программисту приходится быть осторожным при передаче значений в функцию, если не планируется изменение передаваемой переменной: только функции с прототипом
void prim (const int& x);
гарантируют неизменность передаваемого значения.
Итак, передавать параметры по ссылке или же использовать указатель?
С одной стороны, при передаче по ссылке, при чтении кода не сразу понятно, что параметр будет менять значение, в то время как по указателю используется операция взятия адреса, которая обращает на себя внимание.
С другой стороны, при передаче по указателю, в теле самой функции приходится использовать операцию разыменования указателя. Объявление ссылок очень похоже на объявление указателей, только вместо звёздочки «*» нужно писать амперсанд «&».
Итак, аргумент функции prim стал не указателем, а ссылкой. Поэтому теперь:
1. при вызове функции prim компилятор сам передаст адрес переменной z, нет необходимости специально ему указывать на это;
2. внутри функции prim мы обращаемся с x, как с обычной переменной, и только компилятор знает, что это — адрес.

3. Функция с параметрами-указателями. 
Как уже говорилось, здесь передаются адреса фактических параметров, по которым и получаем результат. 
Приведём пример функции, которая меняет местами переменные x,y.

#include <stdio.h>
#include <conio.h>
main()
{ float x,y;
  void swap(float *, float *);  // Прототип функции с параметрами - указателями
  printf("\n  введите x,y ");
  scanf("%f%f",&x,&y);
  swap(&x,&y); // Передаём адреса переменных
  printf("\n  x=%4.2f y=%4.2f ",x,y);
  getch();
}
void swap(float * a, float * b)
{float c;
  c=*a; // *a - содержимое по адресу a 
  *a=*b;
  *b=c;
}


4. Функция с параметрами - ссылками. 

Обычно при передаче параметра в функцию в памяти создается копия переменной, и функция  работает с этой копией. Если же, как было показано ранее, перед именем параметра в заголовке функции поставить &, то функция работает прямо с переменной из вызывающей программы, а не с ее копией. 
Пусть требуется написать функцию, которая определяет максимальное и минимальное из двух целых чисел. В следующей программе мы сделаем так, чтобы функция изменяла значение переменной, которая принадлежит основной программе. Один результат (минимальное из двух чисел) функция вернет как обычно, через своё имя, а второй – за счет изменения переменной, которая передана из основной программы.

#include <stdio.h>
#include <conio.h>
void MinMax ( int a, int b, int &min, int &max )
{
  if ( a > b ) 
  {    max = a; 
       min = b; 
  }
  else 
  {    max = b; 
       min = a; 
  }
}
main()
{
int a, b, min, max;
printf ( "\ nВведите 2 целых числа ");
scanf ( "%d%d", &a, &b );
         MinMax ( a, b,min, max ); // вызов функции

printf ( " Наименьшее из них %d, наибольшее - %d\n", min, max );
getch();
}

При вызове таких функций  в качестве фактических  параметров надо применять только переменную (не число и не арифметическое выражение). 


5. Выполнение работы


1. Написать функцию, которая вычисляет периметр и площадь треугольника. В функцию передаётся длина его сторон. Результаты возвращаются через параметры-указатели. В функции также предусмотреть ошибку в введённых данных (если такой треугольник может существовать, функция возвращает 1, иначе 0 через своё имя).
2. Написать функцию, определяющую вероятность того, что среди n детей будет m девочек или m мальчиков. Предусмотреть контроль входных данных. Вероятность рождения девочки p=0.45, мальчика q=1-p. Вероятность того, что из n детей будет m девочек  равна:
pd=cnm .pm.qn-m , 
для мальчиков
pm=cnm .qm.pn-m
 cnm=n!/(m! *(n-m)!)   Вероятности передать через параметры-ссылки.

6.  Контрольные вопросы

6.1. Как передать результаты выполнения функции через параметры-указатели?
6.2. Как передать результаты выполнения функции через параметры-ссылки?
6.3. Какое требование предъявляется к фактическим параметрам-указателям? 
6.4. Какое требование предъявляется к фактическим параметрам-ссылкам ? 

