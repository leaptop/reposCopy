       
Лабораторная работа №1

Функции

1. Цель работы:  Использование функций  в языке Си.

2. Основные сведения

Часто в программе требуется повторить определенную последовательность операторов в разных частях программы. Для того, чтобы описывать эту последовательность один раз, а применять многократно, в языках программирования применяются подпрограммы.  Подпрограмма - автономная часть программы, выполняющая определенный алгоритм и допускающая обращение к ней из различных частей общей программы. 
В языке Си существует один вид подпрограмм - функции. Каждая программа в своем составе должна иметь главную функцию main(), служащую точкой входа в программу. Кроме функции main(), в программу может входить произвольное число функций, выполнение которых инициализируется вызовами из функции main() или из других функций. Каждая функция по отношению к другой является внешней. Для того, чтобы функция была доступной, необходимо, чтобы до ее вызова о ней было известно компилятору. Форма записи функции:
<тип > <имя функции>(<формальные параметры>)
{<тело функции >}
Если тип возвращаемого функцией значения не указан, то подразумевается int. Если с именем функции не связан результат, то нужно указать тип функции void.  Параметры, записываемые в обращении к функции, называются фактическими;  параметры, указанные в описании функции - формальными. Фактические пара­метры (аргументы функции) должны соответствовать формальным параметрам по количеству, порядку следования и типу. Объекты, объявленные вне функции, действуют в любой функции  и называются глобальны­ми. Объекты, объявленные в функции, действуют только в ней и называются локальными. В теле функции обычно присутствует оператор return <выражение>, определяющий возвращаемое функцией значение. В функцию при её вызове аргументы передаются по значению (кроме передачи массивов), т.е. внутри функции создаются локальные копии параметров. Такие параметры называют параметрами-значениями. Т.к. это локальные копии, то после вызова функции и передачи в неё значений, связь между фактическими и формальными параметрами обрывается. Вызов функции может быть оформлен в виде оператора, если с именем функции не связано возвращаемое значение, или в виде выражения, если возвращаемое значение связано с именем функции. 
Функция может быть описана перед главной функцией main() или после неё, в этом случае до  вызова функции нужно указать её прототип. Прототип функции должен указываться до вызова функции для того, чтобы компилятор мог выполнить проверку соответствия типов аргументов и параметров. Прототип функции по форме такой же, как и заголовок функции, но в конце него ставится точка с запятой. Тогда сама функция может быть описана после главной функции main().

Пример :  Функция с параметрами-значениями. Результат связан с именем функции. В программе объявляется прототип функции, а сама функция описывается ниже.
#include <stdio.h>
#include <conio.h>
int max(int,int); //Прототип функции (можно указывать только тип  
                          //формальных параметров)
 main()
{ int x,y,z;
  printf(" input x,y ");
  scanf("%d%d",&x,&y);
  z=max(x,y);  //Вызов функции с фактическими параметрами
  printf("x=%d y=%d max=%d",x,y,z);
  getch();
}
int max(int a ,int b) //Заголовок функции с формальными параметрами
{ int c;
  if (a>b) c=a;
  else c=b;
  return c;
}


3. ВЫПОЛНЕНИЕ  РАБОТЫ

1. Написать функцию вычисления cosinus с помощью ряда Тейлора  cosinus(x) =1 - x2/2! + x4/4! … + ((-1)n *x2n)/(2n!)  с точностью до eps=0.0001. В качестве параметра передать x. Сравнить полученное значение со значением стандартной функции cos(x)
2. Написать функцию возведения в степень y=xⁿ, где n – целое положительное или отрицательное число; x –  вещественное число. Использовать цикл.


4.  КОНТРОЛЬНЫЕ ВОПРОСЫ

4.1. Описание функции. 
4.2. Где может быть описана функция? Для чего объявляется прототип?
4.3. Что такое формальные и фактические параметры? 
4.4. Какие переменные называют глобальными, и какие локальными?
4.4. Способы вызова функций. 

